import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

public class pruebas {
	
	
//	@Test
	public void case2() {
		
		String[] expected = {"(((((())))))","((((()()))))","((((())())))","((((()))()))","((((())))())","((((()))))()","(((()(()))))","(((()()())))","(((()())()))","(((()()))())","(((()())))()","(((())(())))","(((())()()))","(((())())())","(((())()))()","(((()))(()))","(((()))()())","(((()))())()","(((())))(())","(((())))()()","((()((()))))","((()(()())))","((()(())()))","((()(()))())","((()(())))()","((()()(())))","((()()()()))","((()()())())","((()()()))()","((()())(()))","((()())()())","((()())())()","((()()))(())","((()()))()()","((())((())))","((())(()()))","((())(())())","((())(()))()","((())()(()))","((())()()())","((())()())()","((())())(())","((())())()()","((()))((()))","((()))(()())","((()))(())()","((()))()(())","((()))()()()","(()(((()))))","(()((()())))","(()((())()))","(()((()))())","(()((())))()","(()(()(())))","(()(()()()))","(()(()())())","(()(()()))()","(()(())(()))","(()(())()())","(()(())())()","(()(()))(())","(()(()))()()","(()()((())))","(()()(()()))","(()()(())())","(()()(()))()","(()()()(()))","(()()()()())","(()()()())()","(()()())(())","(()()())()()","(()())((()))","(()())(()())","(()())(())()","(()())()(())","(()())()()()","(())(((())))","(())((()()))","(())((())())","(())((()))()","(())(()(()))","(())(()()())","(())(()())()","(())(())(())","(())(())()()","(())()((()))","(())()(()())","(())()(())()","(())()()(())","(())()()()()","()((((()))))","()(((()())))","()(((())()))","()(((()))())","()(((())))()","()((()(())))","()((()()()))","()((()())())","()((()()))()","()((())(()))","()((())()())","()((())())()","()((()))(())","()((()))()()","()(()((())))","()(()(()()))","()(()(())())","()(()(()))()","()(()()(()))","()(()()()())","()(()()())()","()(()())(())","()(()())()()","()(())((()))","()(())(()())","()(())(())()","()(())()(())","()(())()()()","()()(((())))","()()((()()))","()()((())())","()()((()))()","()()(()(()))","()()(()()())","()()(()())()","()()(())(())","()()(())()()","()()()((()))","()()()(()())","()()()(())()","()()()()(())","()()()()()()"};
		String[] result = {"()()()()()()","(()()()()())","(())()()()()","()(())()()()","()()(())()()","()()()(())()","()()()()(())","()(()()()())","(()()()())()","((()()()()))","((())()()())","((()))()()()","(())(())()()","(())()(())()","(())()()(())","(()(())()())","()((()))()()","()(())(())()","()(())()(())","(()()(())())","()()((()))()","()()(())(())","(()()()(()))","()()()((()))","()()(()()())","()(()()())()","(()(()()()))","(())(()()())","()((()()()))","(()()())()()","((()()())())","((()()()))()","(()()())(())","(((()()())))","()((())()())","((())()())()","(((())()()))","(((()))()())","(((())))()()","((()))(())()","((()))()(())","((())(())())","(())((()))()","(())(())(())","((())()(()))","(())()((()))","()(()(())())","(()(())())()","((()(())()))","(()((()))())","()(((())))()","()((()))(())","(()(())(()))","()(())((()))","()(()()(()))","(()()(()))()","((()()(())))","(()()((())))","()()(((())))","()()()(()())","()()(()())()","(()()(()()))","(())()(()())","()(())(()())","()()((()()))","()(()())()()","(()(()())())","(())(()())()","()((()()))()","()(()())(())","()(()(()()))","(()(()()))()","((()(()())))","((())(()()))","((()))(()())","(())((()()))","(()((()())))","()(((()())))","(()())()()()","((()())()())","((()()))()()","(()())(())()","(()())()(())","()((()())())","((()())())()","(((()())()))","(((()()))())","(((()())))()","((()()))(())","((()())(()))","(()())((()))","((((()()))))","()()((())())","()((())())()","(()((())()))","(())((())())","()(((())()))","((())())()()","(((())())())","(((())()))()","((())())(())","((((())())))","()(((()))())","(((()))())()","((((()))()))","((((())))())","((((()))))()","(((())))(())","(((()))(()))","((()))((()))","()((())(()))","((())(()))()","(((())(())))","((())((())))","(())(((())))","()()(()(()))","()(()(()))()","(()(()(())))","(())(()(()))","()((()(())))","(()(()))()()","((()(()))())","((()(())))()","(()(()))(())","(((()(()))))","()(()((())))","(()((())))()","((()((()))))","(()(((()))))","()((((()))))","(((((())))))"} ;
		
		System.out.println(result.length);
		System.out.println(expected.length);

		Map<String,Integer> map = new HashMap<>();
		
		for (int i = 0; i < expected.length; i++) {
			map.put(expected[i],1);
		}
		
		for (int i = 0; i < result.length; i++) {
			if(map.containsKey(result[i])){
				map.remove(result[i]);
			}
		}
		
		System.out.println(map);
		
	}
	
	@Test
	public void case1() {

		List<String> result = new ArrayList<>();
		StringBuilder sb = new StringBuilder();	
		//            0123456789
		String str = "(()())(()())";
  	 
		int auxX = -1;
		int y = 0;
		int count = 0;
		for (int x = 0; x < str.length(); y++) {
			
			char c = str.charAt(y);
			if(c  == '(') count++;
			else count --;
			

			
			if(count==0) {
				
				System.out.println("---------------");
				System.out.println("X>"+x);
				System.out.println("Y>"+y);
				
				sb.setLength(0);
				sb.append(str.substring(0, x));
				sb.append("(");
				sb.append(str.substring(x, y+1));
				sb.append(")");
				sb.append(str.substring(y+1));
				
				result.add(sb.toString());
				System.out.println(result);
				

				if(auxX==-1) {
					auxX = y;
				}
				if(y==str.length()-1) {
					x = auxX ;
					auxX = -1;
					y = x;
					x++;
				}
				System.out.println("auxX>"+auxX);
				
			}
			
		}

		System.out.println(result);
		
	}
}








